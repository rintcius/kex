
message simple_bool = { v : bool }
message simple_byte = { v : byte }
message simple_int = { v : int }
message simple_long = { v : long }
message simple_float = { v : float }
message simple_string = { v : string }

type tuple 'a 'b = ('a * 'b)
message simple_tuple = { v : tuple<int, bool> }

type digest = string
  options
    "ocaml.type" = "Digest_type.t, Digest_type.from_string, Digest_type.to_string"

message simple_digest = { digest : digest }
message simple_digest2 = { digest : digest; extra : string }

message msg_sum =
    A { b : bool }
  | B { i : int }

type sum_type 'a 'b 'c = A 'a | B 'b | C 'c | D

type sum_type2 'a = A | B 'a | C | D string
  options "ocaml.type_equals" = "Dummy_type.sum"

message simple_sum = { v : sum_type<bool, byte, string> }

message test_constructor_order_kept = { v : sum_type2<int> }

message nested_message = { v : simple_sum; b : int }

message lists_arrays = { lint : [int]; abool : [| bool |] }

message complex_rtt =
  A {
    a1 : [ ( int * [bool] ) ];
    a2 : [ sum_type<int, string, long> ]
    }
| B {
    b1 : bool;
    b2 : (string * [int])
  }

type silly_tuple = ( simple_sum * simple_sum )

message msg1 = { a : int }
message msg1a = A { a : int } | B { b : string }
message msg1b = A { a : int; a' : int } | B { b : string; b' : string }

type int_or_stuff 'a = Int int | Stuff 'a

message msg1c = { a : int_or_stuff<string> }

type color = Red | Black
type node = (int * color * silly_tuple)

message msg1d = { a : node }

type node2 = Node int color silly_tuple
message msg1e = { a : node2 }

message msg2 = { a : int }
message msg2a = { a : int; b : sum_type<bool, byte, int> }
message msg2b = { a : int; b : simple_sum }
message msg2c = { a : int; b : [ int ]; c : [| byte |] }
message msg2c0 = { a : int; b : [ int ] }
message msg2d = { a : int; b : bool }

message msg3 = { v0 : int }
message msg3a = { v0 : int; v1 : silly_tuple; v2 : [ int ] }

type record 'a 'b = { a : 'a; b : 'b }
type irecord 'a = record<int, 'a>

message rec_message = irecord<string>
message rec_message_sum = A irecord<string> | B irecord<int>
message rec_fields = { a : irecord<string>; b : int }

type widen 'a 'b 'c 'd = { a : 'a; b : 'b; c : 'c; d : 'd }

message widen1 = widen< byte, int, long, byte >
message widen2 = widen< int, long, float, long >
message widen3 = widen< long, float, float, float>

message prim_promotion0 = { v : string }
message prim_promotion1 = { v : string; foo : sum_type<int, int, int> }
message prim_promotion2 = { v : prim_promotion1; }

(* foo bar baz *)
